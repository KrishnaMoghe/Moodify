import { Router } from "express";
const router = Router();
import * as moodMappings from "../utils/moodMappings.js";
import { getUserTopArtists, searchArtists, getRecommendations, getUserProfile, createPlaylist, addTracksToPlaylist } from "../spotify/spotifyApi.js";

// 1. Get user's top artists (for artist picker)
// In backend/src/routes/playlist.js, add better error handling
router.get("/top-artists", async (req, res) => {
  const accessToken = req.cookies.access_token;
  if (!accessToken) {
    return res.status(401).json({ error: "No access token" });
  }
  
  try {
    const artists = await getUserTopArtists(accessToken, 15);
    res.json(artists);
  } catch (err) {
    console.error("Spotify API Error:", err.response?.data);
    if (err.response?.status === 401) {
      // Token expired, clear cookies and return 401
      res.clearCookie("access_token");
      res.clearCookie("refresh_token");
      return res.status(401).json({ error: "Token expired" });
    }
    res.status(500).json({ error: "Internal server error" });
  }
});


// 2. Search artist by name (for multi-select)
// 3. Generate playlist


// router.post("/generate", async (req, res) => {
//   const accessToken = req.cookies.access_token;
//   if (!accessToken) return res.status(401).json({ error: "No access token" });
  
//   const { mood, artistIds } = req.body;
//   console.log("=== PLAYLIST GENERATION START ===");
//   console.log("Mood:", mood);
//   console.log("Artist IDs:", artistIds);
//   console.log("Artist IDs type:", typeof artistIds, Array.isArray(artistIds));

//   try {
//     // Step 1: Test recommendations
//     console.log("STEP 1: Getting recommendations...");
//     const moodParams = moodMappings[mood] || moodMappings["Happy"];
//     console.log("Mood params:", moodParams);
    
//     const tracks = await getRecommendations(accessToken, artistIds, moodParams, 20);
//     console.log("SUCCESS: Got", tracks?.length || 0, "tracks");
    
//     // Step 2: Test user profile
//     console.log("STEP 2: Getting user profile...");
//     const user = await getUserProfile(accessToken);
//     console.log("SUCCESS: User ID:", user.id, "Display name:", user.display_name);
    
//     // Step 3: Test playlist creation
//     console.log("STEP 3: Creating playlist...");
//     const playlist = await createPlaylist(
//       accessToken, 
//       user.id, 
//       `Moodify - ${mood} vibes`, 
//       "Custom playlist generated by Moodify"
//     );
//     console.log("SUCCESS: Created playlist ID:", playlist.id);
    
//     // Step 4: Test adding tracks
//     console.log("STEP 4: Adding tracks...");
//     const uris = tracks.map(track => track.uri);
//     console.log("Track URIs:", uris.slice(0, 3), "... (showing first 3)");
    
//     await addTracksToPlaylist(accessToken, playlist.id, uris);
//     console.log("SUCCESS: Added tracks to playlist");

//     res.json({ playlistUrl: playlist.external_urls.spotify });
    
//   } catch (err) {
//     console.error("=== ERROR OCCURRED ===");
//     console.error("Error message:", err.message);
//     console.error("Error status:", err.response?.status);
//     console.error("Error data:", err.response?.data);
//     console.error("Full error:", err);
    
//     // Return more specific error info
//     res.status(500).json({ 
//       error: 'Failed to generate playlist',
//       details: err.message,
//       spotifyError: err.response?.data,
//       step: "Check backend logs for details"
//     });
//   }
// });

// Temporarily update your playlist.js route
router.post("/generate", async (req, res) => {
  const accessToken = req.cookies.access_token;
  if (!accessToken) return res.status(401).json({ error: "No access token" });
  
  try {
    console.log("=== TESTING WITH KNOWN VALID ARTIST IDs ===");
    
    // These are REAL Spotify artist IDs
    const validTestArtistIds = [
      "06HL4z0CvFAxyc27GXpf02", // Taylor Swift
      "3TVXtAsR1Inumwj472S9r4"  // Drake
    ];
    
    const moodParams = { valence: 0.7, energy: 0.9 }; // Energetic
    
    console.log("Testing with valid artist IDs:", validTestArtistIds);
    const tracks = await getRecommendations(accessToken, validTestArtistIds, moodParams, 20);
    console.log("SUCCESS: Got", tracks?.length, "tracks");
    
    // If this works, the problem is your artist data source
    res.json({ message: "Test successful with valid artists", trackCount: tracks?.length });
    
  } catch (err) {
    console.error("Error even with valid artist IDs:", err.message);
    res.status(500).json({ error: err.message });
  }
});


// 3. Generate playlist

export default router;
