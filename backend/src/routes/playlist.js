import { Router } from "express";
const router = Router();
import * as moodMappings from "../utils/moodMappings.js";
import { getUserTopArtists, searchArtists, getRecommendations, getUserProfile, createPlaylist, addTracksToPlaylist } from "../spotify/spotifyApi.js";

// 1. Get user's top artists (for artist picker)
// In backend/src/routes/playlist.js, add better error handling
router.get("/top-artists", async (req, res) => {
  const accessToken = req.cookies.access_token;
  if (!accessToken) {
    return res.status(401).json({ error: "No access token" });
  }
  
  try {
    const artists = await getUserTopArtists(accessToken, 15);
    res.json(artists);
  } catch (err) {
    console.error("Spotify API Error:", err.response?.data);
    if (err.response?.status === 401) {
      // Token expired, clear cookies and return 401
      res.clearCookie("access_token");
      res.clearCookie("refresh_token");
      return res.status(401).json({ error: "Token expired" });
    }
    res.status(500).json({ error: "Internal server error" });
  }
});


// 2. Search artist by name (for multi-select)
// 3. Generate playlist
router.post("/generate", async (req, res) => {
  // res.json({ playlistUrl: "https://open.spotify.com/playlist/3QJgiAiV8sxrsEJlJ8ok2m" });
  const accessToken = req.cookies.access_token;
  if (!accessToken) return res.status(401).json({ error: "No access token" });
  
  const { mood, artistIds } = req.body;
  console.log("Received playlist request:", { mood, artistIds });
  
  if (!mood || !artistIds || !Array.isArray(artistIds)) {
    console.error("Invalid request data:", { mood, artistIds });
    return res.status(400).json({ error: "Incomplete data" });
  }

  try {
    const moodParams = moodMappings[mood] || moodMappings["Happy"];
    console.log("Using mood parameters:", moodParams);
    
    // Find recommendations
    console.log("Fetching recommendations...");
    const tracks = await getRecommendations(accessToken, artistIds, moodParams, 20);
    console.log("Received tracks:", tracks?.length || 0);
    
    if (!tracks || tracks.length === 0) {
      console.error("No tracks found for:", { mood, artistIds });
      return res.status(404).json({ error: "No tracks found" });
    }

    // Get user info
    console.log("Fetching user profile...");
    const user = await getUserProfile(accessToken);
    console.log("User ID:", user.id);

    // Create playlist
    console.log("Creating playlist...");
    const playlist = await createPlaylist(
      accessToken,
      user.id,
      `Moodify - ${mood} vibes`,
      "Custom playlist generated by Moodify"
    );
    console.log("Created playlist:", playlist.id);

    // Add tracks to playlist
    console.log("Adding tracks to playlist...");
    const uris = tracks.map(track => track.uri);
    await addTracksToPlaylist(accessToken, playlist.id, uris);
    console.log("Successfully added tracks");

    // Return playlist link
    res.json({ playlistUrl: playlist.external_urls.spotify });
  } catch (err) {
    console.error("Playlist generation error:", err);
    console.error("Error details:", err.response?.data);
    console.error("Error status:", err.response?.status);
    
    if (err.response?.status === 401) {
      res.clearCookie("access_token");
      res.clearCookie("refresh_token");
      return res.status(401).json({ error: "Token expired" });
    }
    
    res.status(500).json({ 
      error: "Failed to generate playlist",
      details: err.message 
    });
  }
});


// 3. Generate playlist
router.post("/generate", async (req, res) => {
  const accessToken = req.cookies.access_token;
  if (!accessToken) return res.sendStatus(401);
  const { mood, artistIds } = req.body;
  if (!mood || !artistIds || !Array.isArray(artistIds)) return res.status(400).send("Incomplete data");

  try {
    const moodParams = moodMappings[mood] || moodMappings["Happy"];
    // Find recommendations
    const tracks = await getRecommendations(accessToken, artistIds, moodParams, 20);
    if (!tracks || tracks.length === 0) return res.status(404).send("No tracks found");

    // Get user info
    const user = await getUserProfile(accessToken);

    // Create playlist
    const playlist = await createPlaylist(
      accessToken,
      user.id,
      `Moodify - ${mood} vibes`,
      "Custom playlist generated by Moodify"
    );

    // Add tracks to playlist
    const uris = tracks.map(track => track.uri);
    await addTracksToPlaylist(accessToken, playlist.id, uris);

    // Return playlist link
    res.json({ playlistUrl: playlist.external_urls.spotify });
  } catch (err) {
    console.error(err);
    res.sendStatus(500);
  }
});

export default router;
